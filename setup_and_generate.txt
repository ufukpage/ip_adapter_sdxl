{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Face Pair Generator Setup and Demo\n",
    "\n",
    "This notebook will help you set up the environment and generate face pairs using the FacePairGenerator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Environment Setup\n",
    "\n",
    "First, let's create and activate a virtual environment, then install the dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Create and activate virtual environment\n",
    "!python -m venv venv\n",
    "import os\n",
    "if os.name == 'nt':  # Windows\n",
    "    !.\\venv\\Scripts\\activate\n",
    "else:  # Unix/MacOS\n",
    "    !source venv/bin/activate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "%%writefile requirements.txt\n",
    "torch\n",
    "torchvision\n",
    "diffusers\n",
    "transformers\n",
    "accelerate\n",
    "Pillow\n",
    "numpy\n",
    "matplotlib\n",
    "git+lfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Install base requirements\n",
    "!pip install -r requirements.txt\n",
    "\n",
    "# Clone and install required repositories\n",
    "!git clone https://github.com/hhj1897/roi_tanh_warping\n",
    "!cd roi_tanh_warping && pip install -e .\n",
    "\n",
    "!git clone https://github.com/hhj1897/face_detection.git\n",
    "!cd face_detection && git lfs pull && pip install -e .\n",
    "\n",
    "!git clone https://github.com/hhj1897/face_parsing\n",
    "!cd face_parsing && git lfs pull && pip install -e ."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Import Required Modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "from create_dataset import generate_dataset, preview_pairs\n",
    "import torch\n",
    "\n",
    "# Check if CUDA is available\n",
    "print(f\"CUDA available: {torch.cuda.is_available()}\")\n",
    "if torch.cuda.is_available():\n",
    "    print(f\"GPU device: {torch.cuda.get_device_name(0)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Generate Face Pairs\n",
    "\n",
    "Let's generate a small test set of face pairs. Adjust the `num_pairs` parameter as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Generate a small test set (5 pairs)\n",
    "output_dir = \"test_face_pairs\"\n",
    "generate_dataset(num_pairs=5, output_dir=output_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Preview Generated Pairs\n",
    "\n",
    "Let's preview the generated face pairs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Preview the generated pairs\n",
    "preview_pairs(output_dir, num_preview=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Generate Full Dataset (Optional)\n",
    "\n",
    "Uncomment and run the following cell to generate a larger dataset. Be aware that this might take a considerable amount of time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Generate full dataset\n",
    "# Warning: This might take several hours depending on your hardware\n",
    "# generate_dataset(num_pairs=1000, output_dir=\"full_face_pairs\")\n",
    "# preview_pairs(\"full_face_pairs\", num_preview=10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 }
}